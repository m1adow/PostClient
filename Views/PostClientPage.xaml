<Page
    x:Class="PostClient.PostClientPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:PostClient"
    xmlns:ineractivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="using:PostClient.ViewModels"
    xmlns:uc="using:PostClient.Views.Controls"
    mc:Ignorable="d"
    Background="#ffc8dd">
    <Page.Resources>
        <vm:PostClientViewModel x:Key="viewModel"/>
        <Storyboard x:Name="StoryboardLoading">
            <ColorAnimationUsingKeyFrames Storyboard.TargetName="listViewMessages" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)">
                <EasingColorKeyFrame KeyTime="00:00:00" Value="#bde0fe"/>
                <EasingColorKeyFrame KeyTime="00:00:01" Value="#cdb4db"/>
                <EasingColorKeyFrame KeyTime="00:00:02" Value="#bde0fe"/>
            </ColorAnimationUsingKeyFrames>
        </Storyboard>
    </Page.Resources>
    <ineractivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Loaded">
            <core:InvokeCommandAction Command="{Binding Source={StaticResource viewModel}, Path=LoadedHandlerCommand}"
                                      CommandParameter="AllMessages"/>
        </core:EventTriggerBehavior>
    </ineractivity:Interaction.Behaviors>
    <Grid DataContext="{StaticResource viewModel}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="6*"/>
            <ColumnDefinition Width="6*"/>
        </Grid.ColumnDefinitions>
        <SplitView Grid.Column="0"
                   PaneBackground="{ThemeResource SystemControlBackgroundChromeMediumLowBrush}"
                   IsPaneOpen="True" 
                   OpenPaneLength="192" 
                   CompactPaneLength="128" 
                   DisplayMode="Inline">
            <SplitView.Pane>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="15*"/>
                    </Grid.RowDefinitions>
                    <MenuBar Grid.Row="0"
                             Background="#cdb4db">
                        <MenuBarItem x:Uid="MenuBarItemAccount"
                                     Margin="0,-10,0,0"
                                     VerticalAlignment="Center"
                                     HorizontalAlignment="Center" Width="192">
                            <MenuFlyoutItem x:Uid="MenuFlyoutItemLogin"
                                            Icon="Contact"
                                            Command="{Binding LoginViewModel.ShowLoginControlsCommand}"
                                            Visibility="{Binding AccountViewModel.LoginButtonVisibility}"/>
                            <MenuFlyoutItem x:Uid="MenuFlyoutItemInformation"
                                            Icon="ShowResults"
                                            Command="{Binding AccountViewModel.ShowAccountInfoCommand}"
                                            Visibility="{Binding AccountViewModel.AccountControlsVisibility}"/>
                            <MenuFlyoutSeparator/>
                            <MenuFlyoutItem x:Uid="MenuFlyoutItemLogout"
                                            Icon="Cancel"
                                            Command="{Binding AccountViewModel.LogoutCommand}"
                                            Visibility="{Binding AccountViewModel.AccountControlsVisibility}"/>
                        </MenuBarItem>
                    </MenuBar>
                    <StackPanel Margin="10"
                                Grid.Row="1">
                        <Button x:Uid="ButtonNewMail"
                                x:Name="NewMailButton"
                                Command="{Binding SendMessageViewModel.ShowSendingControlsCommand}"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=NewMailButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=NewMailButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="Click">
                                    <core:InvokeCommandAction Command="{Binding ControlMessageViewModel.HideMessageViewCommand}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                            <RelativePanel>
                                <SymbolIcon Symbol="Add"
                                            x:Name="addIcon"
                                            HorizontalAlignment="Left"/>
                                <TextBlock x:Uid="TextBlockNewMail"
                                           RelativePanel.RightOf="addIcon"
                                           Margin="10,2,0,0"/>
                            </RelativePanel>
                        </Button>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="3*"/>
                            </Grid.ColumnDefinitions>
                            <SymbolIcon Grid.Column="0"
                                        Symbol="Folder"
                                        Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"/>
                            <TextBlock Grid.Column="1"
                                       x:Uid="TextBlockFolders"
                                       Foreground="White"
                                       Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"/>
                        </Grid>
                        <Button x:Uid="ButtonInbox"
                                x:Name="InboxButton"
                                Margin="10,5,0,0"
                                HorizontalAlignment="Left"
                                Width="80"
                                Height="40"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                Command="{Binding LoadMessagesViewModel.LoadMessagesFromLocalStorageCommand}"
                                CommandParameter="AllMessages">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=InboxButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=InboxButton}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </Button>
                        <Button x:Uid="ButtonSentMail"
                                x:Name="SentMailButton"
                                Margin="10,5,0,0"
                                HorizontalAlignment="Left"
                                Width="80"
                                Height="40"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                Command="{Binding LoadMessagesViewModel.LoadMessagesFromLocalStorageCommand}"
                                CommandParameter="SentMessages">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=SentMailButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=SentMailButton}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </Button>
                        <Button x:Uid="ButtonFlagged"
                                x:Name="FlaggedButton"
                                Margin="10,5,0,0"
                                HorizontalAlignment="Left"
                                Width="80"
                                Height="40"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                Command="{Binding LoadMessagesViewModel.LoadMessagesFromLocalStorageCommand}"
                                CommandParameter="FlaggedMessages">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=FlaggedButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=FlaggedButton}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </Button>
                        <Button x:Uid="ButtonDrafts"
                                x:Name="DraftsButton"
                                Margin="10,5,0,0"
                                HorizontalAlignment="Left"
                                Width="80"
                                Height="40"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                Command="{Binding LoadMessagesViewModel.LoadMessagesFromLocalStorageCommand}"
                                CommandParameter="DraftMessages">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=DraftsButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=DraftsButton}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </Button>
                        <Button x:Uid="ButtonArchive"
                                x:Name="ArchiveButton"
                                Margin="10,5,0,0"
                                HorizontalAlignment="Left"
                                Width="80"
                                Height="40"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                Command="{Binding LoadMessagesViewModel.LoadMessagesFromLocalStorageCommand}"
                                CommandParameter="ArchiveMessages">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=ArchiveButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=ArchiveButton}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </Button>
                        <Button Content="POP"
                                x:Name="POPButton"
                                Margin="10,5,0,0"
                                HorizontalAlignment="Left"
                                Width="80"
                                Height="40"
                                Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                Command="{Binding LoadMessagesViewModel.LoadMessagesFromLocalStorageCommand}"
                                CommandParameter="POPMessages">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="PointerEntered">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerEnteredHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=POPButton}"/>
                                </core:EventTriggerBehavior>
                                <core:EventTriggerBehavior EventName="PointerExited">
                                    <core:InvokeCommandAction Command="{Binding AnimationsImplementationViewModel.PointerExitedHandlerCommand}"
                                                              CommandParameter="{Binding ElementName=POPButton}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </Button>
                        <TextBlock x:Uid="TextBlockLogin"
                                   Foreground="White"
                                   Margin="0,10,0,0"
                                   Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                        <TextBox Visibility="{Binding LoginViewModel.LoginControlsVisibility}"
                                 Text="{Binding LoginViewModel.Email, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock x:Uid="TextBlockPassword"
                                   Foreground="White"
                                   Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                        <PasswordBox Visibility="{Binding LoginViewModel.LoginControlsVisibility}"
                                     Password="{Binding LoginViewModel.Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <CheckBox x:Uid="CheckBoxRememberMe"
                                  Visibility="{Binding LoginViewModel.LoginControlsVisibility}"
                                  IsChecked="{Binding LoginViewModel.IsRememberMeChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock x:Uid="TextBlockService"
                                   Foreground="White"
                                   Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <RadioButton Grid.Column="0"
                                         x:Uid="RadioButtonGmail"
                                         IsChecked="{Binding LoginViewModel.IsGmailRadioButtonChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                         Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                            <RadioButton Grid.Column="1" 
                                         x:Uid="RadioButtonOutlook"
                                         IsChecked="{Binding LoginViewModel.IsOutlookRadioButtonChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                         Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <AppBarButton Grid.Column="0"
                                          Foreground="White"
                                          Icon="Accept"
                                          x:Uid="AppBarButtonOK"
                                          Margin="5"                                   
                                          Command="{Binding LoginViewModel.LoginCommand}"
                                          CommandParameter="{Binding ElementName=StoryboardLoading}"
                                          Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                            <AppBarButton Grid.Column="1"
                                          Foreground="White"
                                          Icon="Cancel"
                                          x:Uid="AppBarButtonCancel"
                                          Margin="5"
                                          Command="{Binding LoginViewModel.CancelLoginControlsCommand}"
                                          Visibility="{Binding LoginViewModel.LoginControlsVisibility}"/>
                        </Grid>
                    </StackPanel>
                </Grid>
            </SplitView.Pane>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="10*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="6*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0"
                                Margin="10,0,0,0">
                        <TextBlock x:Uid="TextBlockSearch"
                                   Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"/>
                        <TextBox Text="{Binding LoadMessagesViewModel.SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                 x:Uid="TextBoxSearch">
                            <ineractivity:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="TextChanged">
                                    <core:InvokeCommandAction Command="{Binding LoadMessagesViewModel.SearchMessageCommand}"/>
                                </core:EventTriggerBehavior>
                            </ineractivity:Interaction.Behaviors>
                        </TextBox>
                    </StackPanel>
                    <StackPanel Grid.Column="1">
                        <AppBarButton Icon="Refresh"
                                  x:Uid="AppBarButtonSync"
                                  Command="{Binding LoadMessagesViewModel.LoadMessagesFromServerCommand}"
                                  CommandParameter="{Binding ElementName=StoryboardLoading}"
                                  Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center">
                        </AppBarButton>
                        <DropDownButton Foreground="Black"
                                        x:Uid="DropDownButtonSort"                                      
                                        Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center">
                            <DropDownButton.Flyout>
                                <MenuFlyout Placement="Bottom">
                                    <MenuFlyoutItem x:Uid="MenuFlyoutItemA-Z"
                                                    Command="{Binding LoadMessagesViewModel.SortMessagesCommand}"
                                                    CommandParameter="a-z"/>
                                    <MenuFlyoutItem x:Uid="MenuFlyoutItemZ-A"
                                                    Command="{Binding LoadMessagesViewModel.SortMessagesCommand}"
                                                    CommandParameter="z-a"/>
                                    <MenuFlyoutItem x:Uid="MenuFlyoutItemNewer"
                                                    Command="{Binding LoadMessagesViewModel.SortMessagesCommand}"
                                                    CommandParameter="newer"/>
                                    <MenuFlyoutItem x:Uid="MenuFlyoutItemOlder"
                                                    Command="{Binding LoadMessagesViewModel.SortMessagesCommand}"
                                                    CommandParameter="older"/>
                                </MenuFlyout>
                            </DropDownButton.Flyout>
                        </DropDownButton>
                    </StackPanel>
                </Grid>
                <ListView x:Name="listViewMessages" 
                          CanDragItems="True"
                          CanReorderItems="True"
                          AllowDrop="True"
                          BorderThickness="1"
                          BorderBrush="Black"
                          Margin="10"
                          Visibility="{Binding LoginViewModel.ManagmentButtonsVisibility}"
                          ItemsSource="{Binding LoadMessagesViewModel.Messages, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Grid.Row="1">
                    <ineractivity:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="SelectionChanged">
                            <core:InvokeCommandAction Command="{Binding SendMessageViewModel.HideSendingControlsCommand}"/>
                        </core:EventTriggerBehavior>
                        <core:EventTriggerBehavior EventName="Loaded">
                            <core:InvokeCommandAction Command="{Binding KeyDownImplementationViewModel.ListViewLoadedCommand}"
                                                      CommandParameter="{Binding ElementName=listViewMessages}"/>
                        </core:EventTriggerBehavior>
                    </ineractivity:Interaction.Behaviors>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <uc:MailMessageControl Grid.Column="1"
                                                   Subject="{Binding Subject}"
                                                   Date="{Binding Date}"
                                                   From="{Binding From}"
                                                   IsSeen="{Binding IsSeen}"
                                                   IsFlagged="{Binding IsFlagged}"
                                                   FlagCommand="{Binding Source={StaticResource viewModel}, Path=ControlMessageViewModel.FlagMessageCommand}"
                                                   DeleteCommand="{Binding Source={StaticResource viewModel}, Path=ControlMessageViewModel.DeleteMessageCommand}"
                                                   ArchiveCommand="{Binding Source={StaticResource viewModel}, Path=ControlMessageViewModel.ArchiveMessageCommand}"
                                                   UnseenCommand="{Binding Source={StaticResource viewModel}, Path=ControlMessageViewModel.UnseenMessageCommand}">
                                <ineractivity:Interaction.Behaviors>
                                    <core:EventTriggerBehavior EventName="Tapped">
                                        <core:InvokeCommandAction Command="{Binding Source={StaticResource viewModel}, Path=ControlMessageViewModel.ChangeMessageOnTapCommand}"
                                                                  CommandParameter="{Binding}"/>
                                    </core:EventTriggerBehavior>
                                    <core:EventTriggerBehavior EventName="RightTapped">
                                        <core:InvokeCommandAction Command="{Binding Source={StaticResource viewModel}, Path=ControlMessageViewModel.ChangeMessageOnRightTapCommand}"
                                                                  CommandParameter="{Binding}"/>
                                    </core:EventTriggerBehavior>
                                </ineractivity:Interaction.Behaviors>
                            </uc:MailMessageControl>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Grid>
        </SplitView>
        <Grid Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="10*"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0"
                  Background="#cdb4db">
                <CommandBar Visibility="{Binding ControlMessageViewModel.MessageViewConrtolVisibility}">
                    <CommandBar.PrimaryCommands>
                        <AppBarButton Icon="MailReply" 
                                      x:Uid="AppBarButtonUnseen"
                                      Command="{Binding ControlMessageViewModel.ReplyMessageCommand}"/>
                        <AppBarSeparator/>
                        <AppBarButton Icon="Mail" 
                                      x:Uid="AppBarButtonUnseen"
                                      Command="{Binding ControlMessageViewModel.UnseenMessageCommand}"/>
                        <AppBarButton Icon="Save" 
                                      x:Uid="AppBarButtonArchive"
                                      Command="{Binding ControlMessageViewModel.ArchiveMessageCommand}"/>
                        <AppBarButton Icon="Flag" 
                                      x:Uid="AppBarButtonFlag"
                                      Command="{Binding ControlMessageViewModel.FlagMessageCommand}"/>
                        <AppBarButton Icon="Delete" 
                                      x:Uid="AppBarButtonDelete"
                                      Command="{Binding ControlMessageViewModel.DeleteMessageCommand}"/>
                        <AppBarSeparator/>
                        <AppBarButton Icon="Cancel" 
                                      Command="{Binding ControlMessageViewModel.CloseMessageCommand}"/>
                    </CommandBar.PrimaryCommands>
                </CommandBar>
            </Grid>
            <uc:MessageBodyControl MessageBody="{Binding ControlMessageViewModel.SelectedMailMessage.Body}"
                                   Attachments="{Binding ControlMessageViewModel.SelectedMailMessage.Attachments}"
                                   Visibility="{Binding ControlMessageViewModel.MessageViewConrtolVisibility}"
                                   Grid.Row="1"
                                   Margin="10"/>
            <Grid Grid.Row="1"
                  Visibility="{Binding SendMessageViewModel.SendMessageControlsVisibility}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="2*"/>
                    <RowDefinition Height="5*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1.5*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="8*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock x:Uid="TextBlockFrom"
                                   Margin="10,0,0,0"
                                   Grid.Column="0"
                                   Grid.Row="0"/>
                        <TextBox Margin="5,0,5,0"
                                 Grid.Column="1"
                                 Grid.Row="0"
                                 Text="{Binding SendMessageViewModel.MessageSender}"/>
                        <TextBlock x:Uid="TextBlockTo"
                                   Margin="10,0,0,0"
                                   Grid.Column="0"
                                   Grid.Row="1"/>
                        <Grid Grid.Row="1"
                              Grid.Column="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="8*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Margin="5,0,5,0"
                                     Grid.Column="0"
                                     Text="{Binding SendMessageViewModel.MessageReciever, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <AppBarButton Icon="Contact"
                                          x:Name="ContactAppBarButton"
                                          x:Uid="AppBarButtonContact"
                                          Grid.Column="1"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Command="{Binding SendMessageViewModel.ChooseContactCommand}"
                                          CommandParameter="{Binding ElementName=ContactAppBarButton}"/>
                        </Grid>
                    </Grid>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Column="0">
                            <TextBlock Margin="10,0,0,0"
                                       x:Uid="TextBlockName"/>
                            <TextBox Margin="5"
                                     Text="{Binding SendMessageViewModel.MessageName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <StackPanel Grid.Column="1">
                            <TextBlock Margin="10,0,0,0"
                                       x:Uid="TextBlockSubject"/>
                            <TextBox Margin="5"
                                     Text="{Binding SendMessageViewModel.MessageSubject, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                    </Grid>
                </Grid>
                <uc:CreateMessageControl Grid.Row="1"
                                         SendCommand="{Binding SendMessageViewModel.SendMessageCommand}"
                                         SendWithDelayCommand="{Binding SendMessageViewModel.SendMessageWithDelayCommand}"
                                         DraftCommand="{Binding SendMessageViewModel.DraftMessageCommand}"
                                         CancelCommand="{Binding SendMessageViewModel.CancelSendingMessageCommand}"
                                         AttachCommand="{Binding SendMessageViewModel.InsertFileCommand}"
                                         MessageText="{Binding SendMessageViewModel.MessageBody, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                         Attachments="{Binding SendMessageViewModel.Files}"
                                         DelayTime="{Binding SendMessageViewModel.DelayTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </Grid>
        </Grid>
    </Grid>
</Page>
